/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Preorder as PrismaPreorder,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class PreorderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PreorderCountArgs, "select">): Promise<number> {
    return this.prisma.preorder.count(args);
  }

  async preorders<T extends Prisma.PreorderFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PreorderFindManyArgs>
  ): Promise<PrismaPreorder[]> {
    return this.prisma.preorder.findMany<Prisma.PreorderFindManyArgs>(args);
  }
  async preorder<T extends Prisma.PreorderFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PreorderFindUniqueArgs>
  ): Promise<PrismaPreorder | null> {
    return this.prisma.preorder.findUnique(args);
  }
  async createPreorder<T extends Prisma.PreorderCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PreorderCreateArgs>
  ): Promise<PrismaPreorder> {
    return this.prisma.preorder.create<T>(args);
  }
  async updatePreorder<T extends Prisma.PreorderUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PreorderUpdateArgs>
  ): Promise<PrismaPreorder> {
    return this.prisma.preorder.update<T>(args);
  }
  async deletePreorder<T extends Prisma.PreorderDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PreorderDeleteArgs>
  ): Promise<PrismaPreorder> {
    return this.prisma.preorder.delete(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.preorder
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }
}
